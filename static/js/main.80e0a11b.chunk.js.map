{"version":3,"sources":["logo.svg","Components/columns.js","Components/PaginationTable.js","App.js","reportWebVitals.js","index.js"],"names":["COLUMNS","Header","Footer","accessor","PaginationTable","columns","useMemo","data","mock_data","useTable","usePagination","getTableProps","getTableBodyProps","headerGroups","page","footerGroups","nextPage","previousPage","canNextPage","canPreviousPage","pageOptions","state","setPageSize","prepareRow","pageIndex","pageSize","map","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","render","row","getRowProps","cells","cell","getCellProps","length","value","onChange","e","Number","target","onClick","disabled","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"iOAAe,I,0BCAFA,EAAQ,CACjB,CACIC,OAAO,KACPC,OAAO,KACPC,SAAS,MAGb,CACIF,OAAO,OACPC,OAAO,OACPC,SAAS,QAEb,CACIF,OAAO,QACPC,OAAO,QACPC,SAAS,SAEb,CACIF,OAAO,UACPC,OAAO,UACPC,SAAS,WAEb,CACIF,OAAO,MACPC,OAAO,MACPC,SAAS,OAEb,CACIF,OAAO,OACPC,OAAO,OACPC,SAAS,QAEb,CACIF,OAAO,QACPC,OAAO,QACPC,SAAS,SAEb,CACIF,OAAO,QACPC,OAAO,QACPC,SAAS,cClCJC,G,MAAgB,WAEzB,IAAMC,EAAQC,mBAAQ,kBAAMN,IAAS,IAC/BO,EAAKD,mBAAQ,kBAAME,IAAW,IAFxC,EAiBOC,mBACC,CACIJ,UACAE,QACFG,iBAjBLC,EAJL,EAIKA,cACGC,EALR,EAKQA,kBACAC,EANR,EAMQA,aAEAC,GARR,EAOQC,aAPR,EAQQD,MACAE,EATR,EASQA,SACAC,EAVR,EAUQA,aACAC,EAXR,EAWQA,YACAC,EAZR,EAYQA,gBACAC,EAbR,EAaQA,YACAC,EAdR,EAcQA,MACAC,EAfR,EAeQA,YACAC,EAhBR,EAgBQA,WAMOC,EAAqBH,EAArBG,UAAWC,EAAUJ,EAAVI,SACtB,OACF,qCACM,kDAAWd,GAAX,cACI,gCAEQE,EAAaa,KAAI,SAAAC,GAAW,OACxB,8CAAQA,EAAYC,uBAApB,aAEQD,EAAYE,QAAQH,KAAI,SAACI,GAAD,OACpB,8CAAQA,EAAOC,kBAAf,aAGQD,EAAOE,OAAO,wBAU9C,iDAAWpB,GAAX,aAEQE,EAAKY,KAAI,SAAAO,GAEL,OADAV,EAAWU,GAEP,8CAAQA,EAAIC,eAAZ,aAEQD,EAAIE,MAAMT,KAAI,SAACU,GAEX,OAAO,8CAAQA,EAAKC,gBAAb,aAGCD,EAAKJ,OAAO,2BAcpD,gCACI,wCACU,IACN,mCACKR,EAAY,EADjB,OACwBJ,EAAYkB,UAC1B,OAEd,wBAAQC,MAAOd,EAAUe,SAAU,SAAAC,GAAC,OAAInB,EAAYoB,OAAOD,EAAEE,OAAOJ,SAApE,SACK,CAAC,GAAG,IAAIb,KAAI,SAAAD,GAAQ,OACjB,wBAAuBc,MAAOd,EAA9B,SACKA,GADQA,QAMrB,wBAAQmB,QAAS,kBAAK3B,KAAgB4B,UAAW1B,EAAjD,sBACA,wBAAQyB,QAAS,kBAAI5B,KAAY6B,UAAW3B,EAA5C,0BCjFG4B,MARf,WACE,OACE,qBAAKC,UAAU,MAAf,SACE,cAAC,EAAD,OCISC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASzB,OACP,cAAC,IAAM0B,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.80e0a11b.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","export const COLUMNS=[\r\n    {\r\n        Header:'ID',\r\n        Footer:'ID',\r\n        accessor:'id'\r\n        \r\n    },\r\n    {\r\n        Header:'Name',\r\n        Footer:'Name',\r\n        accessor:'name'\r\n    },\r\n    {\r\n        Header:'Email',\r\n        Footer:'Email',\r\n        accessor:'email'\r\n    },\r\n    {\r\n        Header:'Company',\r\n        Footer:'Company',\r\n        accessor:'company'\r\n    },\r\n    {\r\n        Header:'Job',\r\n        Footer:'Job',\r\n        accessor:'job'\r\n    },\r\n    {\r\n        Header:'City',\r\n        Footer:'City',\r\n        accessor:'city'\r\n    },\r\n    {\r\n        Header:'Phone',\r\n        Footer:'Phone',\r\n        accessor:'phone'\r\n    },\r\n    {\r\n        Header:'Movie',\r\n        Footer:'Movie',\r\n        accessor:'Fav Movie'\r\n    }\r\n]","import React,{useMemo} from 'react'\r\nimport { usePagination, useSortBy, useTable } from 'react-table'\r\nimport mock_data from './Mock-Data.json'\r\nimport {COLUMNS} from './columns'\r\nimport './Table.css'\r\n\r\nexport const PaginationTable=()=>\r\n{\r\n    const columns=useMemo(() => COLUMNS, [])\r\n    const data=useMemo(() => mock_data, [])\r\n    const\r\n    {getTableProps,\r\n        getTableBodyProps,\r\n        headerGroups,\r\n        footerGroups,\r\n        page,\r\n        nextPage,\r\n        previousPage,\r\n        canNextPage,\r\n        canPreviousPage,\r\n        pageOptions,\r\n        state,\r\n        setPageSize,\r\n        prepareRow\r\n    }= useTable(\r\n        {\r\n            columns,\r\n            data\r\n        },usePagination)\r\n        const {pageIndex, pageSize}=state\r\n    return(\r\n  <>\r\n        <table {...getTableProps}>\r\n            <thead >\r\n                {\r\n                    headerGroups.map(headerGroup =>(\r\n                        <tr {...headerGroup.getHeaderGroupProps()}>\r\n                            {\r\n                                headerGroup.headers.map((column) =>(\r\n                                    <th {...column.getHeaderProps()}>\r\n\r\n                                        {\r\n                                            column.render('Header')\r\n                                        }\r\n                                    </th>\r\n                                ))\r\n                            }\r\n                    \r\n                    </tr>  \r\n                    ))\r\n                }\r\n            </thead>\r\n            <tbody {...getTableBodyProps}>\r\n                {\r\n                    page.map(row => {\r\n                        prepareRow(row)\r\n                        return(\r\n                            <tr {...row.getRowProps()}>\r\n                                {\r\n                                    row.cells.map((cell)=>\r\n                                    {\r\n                                        return <td {...cell.getCellProps()}>\r\n\r\n                                            {\r\n                                                cell.render('Cell')\r\n                                            }\r\n                                        </td>\r\n                                    })\r\n                                }\r\n                </tr>\r\n\r\n                        )\r\n                    })\r\n                }\r\n                \r\n            </tbody>\r\n            \r\n        </table>\r\n        <div>\r\n            <span>\r\n                Page{ ' '}\r\n                <strong>\r\n                    {pageIndex + 1} of {pageOptions.length}\r\n                </strong>{' '}\r\n            </span>\r\n            <select value={pageSize} onChange={e => setPageSize(Number(e.target.value))}>\r\n                {[10,20].map(pageSize => (\r\n                    <option key={pageSize} value={pageSize}>\r\n                        {pageSize}\r\n                    </option>\r\n                    \r\n                ))}\r\n            </select>\r\n            <button onClick={()=> previousPage()} disabled={!canPreviousPage}>Previous</button>\r\n            <button onClick={()=>nextPage()} disabled={!canNextPage}>Next</button>\r\n        </div>\r\n        </>\r\n    )\r\n}","import logo from './logo.svg';\nimport './App.css';\n\nimport { PaginationTable } from './Components/PaginationTable';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <PaginationTable/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}